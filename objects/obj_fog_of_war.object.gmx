<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fog</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate
sprite_w = obj_hero.sprite_width;
room_w = room_width div sprite_w;
room_h = room_height div sprite_w;
shade_grid = ds_grid_create(room_w, room_h);
shade_distance = 264;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fill grid

if(obj_hero.turn_taken){
    for(yy = 0; yy &lt; room_h; yy++){
        for(xx = 0; xx &lt; room_w; xx++){
            x = xx * sprite_w;
            y = yy * sprite_w;
            distance = distance_to_object(obj_hero);
            blocked = instance_place(x, y, obj_blocked);
            if( x &gt; obj_hero.x){
                temp_x = x - 1;
                temp_x_hero = obj_hero.x + sprite_w;
            } else if( x == obj_hero.x){
                temp_x = x;
                temp_x_hero = obj_hero.x;
            } else {
                temp_x = x + sprite_w + 1;
                temp_x_hero = obj_hero.x;
            }
            if( y &gt; obj_hero.y){
                temp_y = y - 1;
                temp_y_hero = obj_hero.y + sprite_w;
            } else if( y == obj_hero.y){
                temp_y = y;
                temp_y_hero = obj_hero.y;
            } else {
                temp_y = y + sprite_w + 1;
                temp_y_hero = obj_hero.y;
            }
            
            
            if( blocked != noone){
                with(blocked){
                    if( obj_fog_of_war.distance &lt; obj_fog_of_war.shade_distance and !collision_line(obj_fog_of_war.temp_x, obj_fog_of_war.temp_y, obj_fog_of_war.temp_x_hero, obj_fog_of_war.temp_y_hero, obj_blocked, 1, 1)){
                        ds_grid_set(obj_fog_of_war.shade_grid, obj_fog_of_war.xx, obj_fog_of_war.yy, obj_fog_of_war.distance / obj_fog_of_war.shade_distance);
                    } else {
                        ds_grid_set(obj_fog_of_war.shade_grid, obj_fog_of_war.xx, obj_fog_of_war.yy, 1);
                    }
                }
            } else {
                if( distance &lt; shade_distance and !collision_line(temp_x, temp_y, obj_fog_of_war.temp_x_hero, obj_fog_of_war.temp_y_hero, obj_blocked, 1, 1)){
                    ds_grid_set(shade_grid, xx, yy, distance / shade_distance);
                } else {
                    ds_grid_set(shade_grid, xx, yy, 1);
                }
            }
        }
    }
    obj_hero.turn_taken = false;   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw fog
draw_set_color(c_black);

for( var yy = 0; yy &lt; room_h; yy++){
    for( var xx = 0; xx &lt; room_w; xx++){
        draw_set_alpha(ds_grid_get(shade_grid, xx, yy));
        var temp_x = xx * sprite_w;
        var temp_y = yy * sprite_w;
        draw_rectangle(temp_x, temp_y, temp_x + sprite_w - 1, temp_y + sprite_w - 1, false);
    }
}
draw_set_alpha(1)
draw_set_blend_mode( bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
