<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate
hp = 5
hp_max = hp
spd = random(10) / 10
time = 0
ds_queue_enqueue(obj_turn.actors, id)
Coord_List = ds_queue_create()
debug = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Die if health 0 or less
if( hp &lt;= 0){
    if(id = obj_turn.turn){
        obj_turn.turn = noone
    }
    instance_destroy()
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take a turn
if(id = obj_turn.turn){
/*
    if(collision_circle(x, y, 300, obj_hero, false, true) and not collision_circle(x, y, sprite_width, obj_hero, false, true)){
        path = scr_find_path_stack(x, y, obj_hero.x, obj_hero.y, sprite_width);
        var coord = ds_stack_pop(path);
        var width = room_width div sprite_width;
        ds_stack_destroy(path);
        x = (coord mod width) * sprite_width;
        y = (coord div width) * sprite_width;
    }
*/
    var temp_x = x div sprite_width;
    var temp_y = y div sprite_width;
    var temp_hero_x = obj_hero.x div sprite_width;
    var temp_hero_y = obj_hero.y div sprite_width;
    var room_w = room_width div sprite_width
    if(collision_circle(x, y, 300, obj_hero, false, true)){
        var priority = ds_priority_create();
        for(var yy = -1; yy &lt; 2; yy++){
            for(var xx = -1; xx &lt; 2; xx++){
                if(!place_meeting((xx + temp_x) * sprite_width, (yy + temp_y) * sprite_width, obj_blocked)){
                    ds_priority_add(priority, xx + temp_x + (yy + temp_y) * room_w, point_distance(xx + temp_x, yy + temp_y, temp_hero_x, temp_hero_y));
                }
            }
        };
        if(not ds_priority_empty(priority)){
            var temp_coord = ds_priority_find_min(priority);
            x = (temp_coord mod room_w) * sprite_width;
            y = (temp_coord div room_w) * sprite_width;
        };
        ds_priority_destroy(priority);
    };
    obj_turn.turn = noone;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self with health bar
draw_self()

draw_set_color(c_red)

var temp_x = x - 1
var temp_y = y 
var hp_length = sprite_width * ( hp / hp_max )

draw_line_width(temp_x, temp_y, temp_x + hp_length, temp_y, 3)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
