<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Cell_Size = 32;

Grid_Width = room_width/Cell_Size;
Grid_Height = room_height/Cell_Size;

Debug_Grid = ds_grid_create(Grid_Width, Grid_Height); //that's the debug grid.

Coord_List = ds_list_create(); //That list can hold a path.

Step = 0;

Sprite_Path_Angle = 0; //To rotate path_sprite(Look on the draw event)


//All sprites in this project are made by Oryx from http://oryxdesignlab.com/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//When alarm[0] is activated, instance will move along the path looking for coordinates on that list and delete them 2 by 2 (x and y)
if(!ds_list_empty(Coord_List))
{
x = ds_list_find_value(Coord_List, 0)*Step;
y = ds_list_find_value(Coord_List, 1)*Step;

    repeat(2)
    {
    ds_list_delete(Coord_List, 0);
    }

alarm[0] = 5;
}
else
{
ds_list_clear(Coord_List);
ds_grid_clear(Debug_Grid, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_check_button_pressed(mb_left))
{
alarm[0] = -1;
ds_list_clear(Coord_List);
ds_grid_clear(Debug_Grid, 0);
scr_find_grid_path(id, mouse_x, mouse_y, true, Cell_Size);
}


else if(mouse_check_button_pressed(mb_right) &amp;&amp; !ds_list_empty(Coord_List))
{
ds_list_clear(Coord_List);
ds_grid_clear(Debug_Grid, 0);
}


if(keyboard_check_pressed(vk_enter))
{
    if(!ds_list_empty(Coord_List))
    {
    alarm[0] = 1;
    }
}

Sprite_Path_Angle = (360+Sprite_Path_Angle - 2) mod 360; //To rotate the sprite used to show the path.




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Remember to destroy your data structures!
ds_grid_destroy(Debug_Grid);
ds_list_destroy(Coord_List);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

//that's the debug grid. To see the distance between the that instance and the target.
var xx, yy;

draw_set_color(c_yellow);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);

for(yy=0; yy&lt;Grid_Height; yy++)
{
    for(xx=0; xx&lt;Grid_Width; xx++)
    {
    draw_set_alpha(0.3);
    draw_text(xx*Cell_Size+Cell_Size/2, yy*Cell_Size+Cell_Size/2, ds_grid_get(Debug_Grid, xx, yy));
    draw_set_alpha(1);
    }
}



//This part draws the path, if list is not empty, of course.
if(!ds_list_empty(Coord_List))
{
var x1, x2, i;

    for(i=0; i&lt;ds_list_size(Coord_List); i+=2)
    {
    x1 = ds_list_find_value(Coord_List, i)*Cell_Size+Cell_Size/2;
    y1 = ds_list_find_value(Coord_List, i+1)*Cell_Size+Cell_Size/2;
    draw_sprite_ext(spr_path, 0, x1, y1, 1, 1, Sprite_Path_Angle, c_white, 1);
    }

}

draw_set_color(c_white);
draw_set_halign(fa_left);
draw_text(16, 8, 'Left_click to add path, Right-click to clear path, Press enter to follow path');
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
